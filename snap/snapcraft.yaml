%YAML 1.1
---
# Snapcraft Recipe for Facebook Metadata Obfuscator
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft

# All following comments, including this one, are designed to be stripped
# before contributing the recipe to the upstream

# Facebook Metadata Obfuscator, fbmdob, fbmdob-launch
# are placeholders text meant to be replaced by appropriate content
name: fbmdob
title: Facebook Metadata Obfuscator
summary: Facebook image Metadata Obfuscation server
description: |
  (The following is the introduction text from the [upstream project site][1])

  It [came to my attention recently][2] that Facebook is embedding tracking metadata in photos that you download from facebook.com using a IPTC special instruction that starts with `FBMD`. This is just one more way for Facebook to keep track of your activities on the internet, and a sneaky one at that.

  This is a small server that uses Crystal and Kemal to swap the hash in that special instruction with a randomly generated one. Why not just remove the instruction completely you ask? Because, removing the instruction does nothing to Facebook. They just lose one of millions of tracked images. But replacing the hash with a new one may just fuck with their algorithm [wink][3]

  [1]: https://github.com/watzon/fbmdob
  [2]: https://twitter.com/oasace/status/1149181539000864769
  [3]: https://github.githubassets.com/images/icons/emoji/unicode/1f609.png

  **Snap-specific information**

  This is NOT an official distribution of Facebook Metadata Obfuscator, for any issues regarding this snap please refer to [the snap's issue tracker][4].

  [4]: https://github.com/Lin-Buo-Ren/fbmdob-snap/issues

# The path of icon to represent the snap, relative to the source tree directory
# Only PNG or SVG image is supported, dimension must be greater than 256x256px
icon: snap/gui/placeholder-icon.png

# The license of this application, in SPDX format
# NOTE: Currently only supports SPDX 2.1 license expressions, as described in Appendix IV of
# https://spdx.org/spdx-specification-21-web-version
# Supported expressions:
# https://github.com/snapcore/snapd/blob/HEAD/spdx/licenses.go
license: MIT

# Version string just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version string
# being accidentally interpreted as a YAML non-string(like '1', '1.2').
# http://yaml.org/type
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
# NOTE: This key is mutual exclusive with the `adopt-info` key
#version: Derived from the part specified by the `adopt-info` property

# Extract metadata from the main snap part
# https://forum.snapcraft.io/t/extracting-information-from-sources-in-snapcraft-parts/4642
adopt-info: fbmdob

# Snapd feature set and version the snap requires in order to work
# https://forum.snapcraft.io/t/snapcraft-top-level-metadata/8334#heading--assumes
assumes:
- command-chain

# Base runtime
# The common runtime for the snap to run on, or `bare` for static linked applications
base: core
# https://docs.snapcraft.io/snapcraft-top-level-metadata/8334#heading--base

# Security confinement
# Use `devmode` to getting started
# Flip to `strict` once you have the right plugs and slots,
# or `classic` once you determine that strict confinement is not currently possible
confinement: devmode

# Snap Grade
# Use `devel` to getting started
# Flip to `stable` once you determine that the snap is matured, only `stable` grade
# snaps can be promoted to `candidate` and `stable` channels
grade: devel

# Run `snapcraft help sources` for supported keywords on pulling a part's source ingredients
# Run `snapcraft plugins` for supported build helper plugins
# Run `snapcraft help plugins` for supported keywords on building a part
# For `override-*` scriptlets used to modify behavior of certain part's lifecycle phase, check out:
# https://docs.snapcraft.io/scriptlets/4892
parts:
  # Files to patch the files in the snap
  #patching:
    #source: snap/local/patching
    #plugin: dump
    #organize:
      #'*': patching/
    #prime:
    #- -*

  # Launcher programs to fix problems at runtime
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*': bin/
    stage:
    - -bin/README.*

  # Programs to modify the behavior of each step of the snapcraft lifecycles
  #scriptlets:
    #source: snap/local/scriptlets
    #plugin: dump
    #organize:
      #'*': scriptlets/
    #prime:
    #- -*

  crystal:
    plugin: nil
    build-packages:
    - apt-transport-https
    - curl
    override-pull: |
      set -o nounset

      curl -sSL https://dist.crystal-lang.org/apt/setup.sh \
        | sudo bash
      sudo apt install \
        --assume-yes \
        crystal

  # Check out the tagged release revision if it isn't promoted to the stable channel
  # https://forum.snapcraft.io/t/selective-checkout-check-out-the-tagged-release-revision-if-it-isnt-promoted-to-the-stable-channel/10617
  selective-checkout:
    plugin: nil
    build-packages:
    - git
    stage-snaps:
    - selective-checkout
    prime:
    - -*

  fbmdob:
    after:
    - crystal
    - selective-checkout

    source: https://github.com/watzon/fbmdob.git
    #source-depth:
    override-pull: |
      set -o nounset

      snapcraftctl pull

      "${SNAPCRAFT_STAGE}"/scriptlets/selective-checkout \
        --append-packaging-revision

    plugin: nil
    override-build: |
      set -o nounset

      shards build
      install \
        -D \
        --target-directory "${SNAPCRAFT_PART_INSTALL}"/bin \
        bin/*

  fbmdob-runtime-deps:
    plugin: nil
    stage-packages:
    - libevent-2.0-5
    - libevent-pthreads-2.0-5
    stage:
    - lib/**/*.so*
    - usr/lib/**/*.so*
    - usr/share/doc/**/copyright

# Apps that are exposed by the snap package
# If the _app_name_ is identical with the _snap_name_ it can be directly run
# with `_snap_name_` or `snap run _snap_name_` commands, otherwise it can only be run
# via `_snap_name_._app_name_` or `snap run _snap_name_._app_name_`
apps:
  fbmdob:
    # The adapter to set up runtime environment at the launch of the snap
    # NOTE: The `command-chain` property is only supported by the `full` adapter
    adapter: full

    # An *relative path* to an executable file root from the `prime` directory to be executed, and its command-line arguments
    # NOTE: The right angle bracket at the beginning of the value of the `command` keyword starts a YAML folded style block scalar, refer the following spec document for more info: http://yaml.org/spec/1.2/spec.html#id2796251
    command: bin/fbmdob

    # The commands that are run, in order, before running the one specified by the `command` key
    command-chain:
    - bin/fbmdob-launch

    daemon: simple

# Refer the following documentation for asserting interface plugs and slots in a security confined snap:
# Interface management - doc - snapcraft.io
# https://docs.snapcraft.io/interface-management/6154
# Supported interfaces - doc - snapcraft.io
# https://docs.snapcraft.io/supported-interfaces/7744
# Non-A/C: Non-autoconnect interface
plugs:
  # Regular files access
  #home:
  #removable-media: # Non-A/C

  # Network access
  network-bind:

#slots:
